input createDiaInput {
  data: DiaInput
}

type createDiaPayload {
  dia: Dia
}

input createEmpresaInput {
  data: EmpresaInput
}

type createEmpresaPayload {
  empresa: Empresa
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteDiaInput {
  where: InputID
}

type deleteDiaPayload {
  dia: Dia
}

input deleteEmpresaInput {
  where: InputID
}

type deleteEmpresaPayload {
  empresa: Empresa
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type Dia {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  fecha: DateTime
  user: UsersPermissionsUser
  empresa: Empresa
  estado: ENUM_DIA_ESTADO
}

type DiaAggregator {
  count: Int
}

type DiaConnection {
  values: [Dia]
  groupBy: DiaGroupBy
  aggregate: DiaAggregator
}

type DiaConnection_id {
  key: ID
  connection: DiaConnection
}

type DiaConnectionCreatedAt {
  key: DateTime
  connection: DiaConnection
}

type DiaConnectionEmpresa {
  key: ID
  connection: DiaConnection
}

type DiaConnectionEstado {
  key: String
  connection: DiaConnection
}

type DiaConnectionFecha {
  key: DateTime
  connection: DiaConnection
}

type DiaConnectionUpdatedAt {
  key: DateTime
  connection: DiaConnection
}

type DiaConnectionUser {
  key: ID
  connection: DiaConnection
}

type DiaGroupBy {
  _id: [DiaConnection_id]
  createdAt: [DiaConnectionCreatedAt]
  updatedAt: [DiaConnectionUpdatedAt]
  fecha: [DiaConnectionFecha]
  user: [DiaConnectionUser]
  empresa: [DiaConnectionEmpresa]
  estado: [DiaConnectionEstado]
}

input DiaInput {
  fecha: DateTime
  user: ID
  empresa: ID
  estado: ENUM_DIA_ESTADO
}

input editDiaInput {
  fecha: DateTime
  user: ID
  empresa: ID
  estado: ENUM_DIA_ESTADO
}

input editEmpresaInput {
  nombre: String
  dias: [ID]
  users: [ID]
  managers: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  dias: [ID]
  empresa: ID
  managerDe: ID
}

type Empresa {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nombre: String
  dias(sort: String, limit: Int, start: Int, where: JSON): [Dia]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  managers(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type EmpresaAggregator {
  count: Int
}

type EmpresaConnection {
  values: [Empresa]
  groupBy: EmpresaGroupBy
  aggregate: EmpresaAggregator
}

type EmpresaConnection_id {
  key: ID
  connection: EmpresaConnection
}

type EmpresaConnectionCreatedAt {
  key: DateTime
  connection: EmpresaConnection
}

type EmpresaConnectionNombre {
  key: String
  connection: EmpresaConnection
}

type EmpresaConnectionUpdatedAt {
  key: DateTime
  connection: EmpresaConnection
}

type EmpresaGroupBy {
  _id: [EmpresaConnection_id]
  createdAt: [EmpresaConnectionCreatedAt]
  updatedAt: [EmpresaConnectionUpdatedAt]
  nombre: [EmpresaConnectionNombre]
}

input EmpresaInput {
  nombre: String
  dias: [ID]
  users: [ID]
  managers: [ID]
}

enum ENUM_DIA_ESTADO {
  pedido
  confirmado
  denegado
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Dia | createDiaPayload | updateDiaPayload | deleteDiaPayload | DiaConnection | DiaAggregator | DiaGroupBy | DiaConnection_id | DiaConnectionCreatedAt | DiaConnectionUpdatedAt | DiaConnectionFecha | DiaConnectionUser | DiaConnectionEmpresa | DiaConnectionEstado | Empresa | createEmpresaPayload | updateEmpresaPayload | deleteEmpresaPayload | EmpresaConnection | EmpresaAggregator | EmpresaGroupBy | EmpresaConnection_id | EmpresaConnectionCreatedAt | EmpresaConnectionUpdatedAt | EmpresaConnectionNombre | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionEmpresa | UsersPermissionsUserConnectionManagerDe

type Mutation {
  createDia(input: createDiaInput): createDiaPayload
  updateDia(input: updateDiaInput): updateDiaPayload
  deleteDia(input: deleteDiaInput): deleteDiaPayload
  createEmpresa(input: createEmpresaInput): createEmpresaPayload
  updateEmpresa(input: updateEmpresaInput): updateEmpresaPayload
  deleteEmpresa(input: deleteEmpresaInput): deleteEmpresaPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  dia(id: ID!): Dia
  dias(sort: String, limit: Int, start: Int, where: JSON): [Dia]
  diasConnection(sort: String, limit: Int, start: Int, where: JSON): DiaConnection
  empresa(id: ID!): Empresa
  empresas(sort: String, limit: Int, start: Int, where: JSON): [Empresa]
  empresasConnection(sort: String, limit: Int, start: Int, where: JSON): EmpresaConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateDiaInput {
  where: InputID
  data: editDiaInput
}

type updateDiaPayload {
  dia: Dia
}

input updateEmpresaInput {
  where: InputID
  data: editEmpresaInput
}

type updateEmpresaPayload {
  empresa: Empresa
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  dias: [ID]
  empresa: ID
  managerDe: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  empresa: Empresa
  managerDe: Empresa
  dias(sort: String, limit: Int, start: Int, where: JSON): [Dia]
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmpresa {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionManagerDe {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  empresa: [UsersPermissionsUserConnectionEmpresa]
  managerDe: [UsersPermissionsUserConnectionManagerDe]
}
