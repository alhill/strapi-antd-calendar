input createDiaInput {
  data: DiaInput
}

type createDiaPayload {
  dia: Dia
}

input createDocumentoInput {
  data: DocumentoInput
}

type createDocumentoPayload {
  documento: Documento
}

input createEquipoInput {
  data: EquipoInput
}

type createEquipoPayload {
  equipo: Equipo
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteDiaInput {
  where: InputID
}

type deleteDiaPayload {
  dia: Dia
}

input deleteDocumentoInput {
  where: InputID
}

type deleteDocumentoPayload {
  documento: Documento
}

input deleteEquipoInput {
  where: InputID
}

type deleteEquipoPayload {
  equipo: Equipo
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type Dia {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  fecha: DateTime
  user: UsersPermissionsUser
  equipo: Equipo
  estado: ENUM_DIA_ESTADO
  tipo: ENUM_DIA_TIPO
}

type DiaAggregator {
  count: Int
}

type DiaConnection {
  values: [Dia]
  groupBy: DiaGroupBy
  aggregate: DiaAggregator
}

type DiaConnection_id {
  key: ID
  connection: DiaConnection
}

type DiaConnectionCreatedAt {
  key: DateTime
  connection: DiaConnection
}

type DiaConnectionEquipo {
  key: ID
  connection: DiaConnection
}

type DiaConnectionEstado {
  key: String
  connection: DiaConnection
}

type DiaConnectionFecha {
  key: DateTime
  connection: DiaConnection
}

type DiaConnectionTipo {
  key: String
  connection: DiaConnection
}

type DiaConnectionUpdatedAt {
  key: DateTime
  connection: DiaConnection
}

type DiaConnectionUser {
  key: ID
  connection: DiaConnection
}

type DiaGroupBy {
  _id: [DiaConnection_id]
  createdAt: [DiaConnectionCreatedAt]
  updatedAt: [DiaConnectionUpdatedAt]
  fecha: [DiaConnectionFecha]
  user: [DiaConnectionUser]
  equipo: [DiaConnectionEquipo]
  estado: [DiaConnectionEstado]
  tipo: [DiaConnectionTipo]
}

input DiaInput {
  fecha: DateTime
  user: ID
  equipo: ID
  estado: ENUM_DIA_ESTADO
  tipo: ENUM_DIA_TIPO
}

type Documento {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  archivo: UploadFile
  user: UsersPermissionsUser
}

type DocumentoAggregator {
  count: Int
}

type DocumentoConnection {
  values: [Documento]
  groupBy: DocumentoGroupBy
  aggregate: DocumentoAggregator
}

type DocumentoConnection_id {
  key: ID
  connection: DocumentoConnection
}

type DocumentoConnectionArchivo {
  key: ID
  connection: DocumentoConnection
}

type DocumentoConnectionCreatedAt {
  key: DateTime
  connection: DocumentoConnection
}

type DocumentoConnectionUpdatedAt {
  key: DateTime
  connection: DocumentoConnection
}

type DocumentoConnectionUser {
  key: ID
  connection: DocumentoConnection
}

type DocumentoGroupBy {
  _id: [DocumentoConnection_id]
  createdAt: [DocumentoConnectionCreatedAt]
  updatedAt: [DocumentoConnectionUpdatedAt]
  archivo: [DocumentoConnectionArchivo]
  user: [DocumentoConnectionUser]
}

input DocumentoInput {
  archivo: ID
  user: ID
}

input editDiaInput {
  fecha: DateTime
  user: ID
  equipo: ID
  estado: ENUM_DIA_ESTADO
  tipo: ENUM_DIA_TIPO
}

input editDocumentoInput {
  archivo: ID
  user: ID
}

input editEquipoInput {
  nombre: String
  dias: [ID]
  users: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  dias: [ID]
  equipo: ID
  manager: Boolean
  documento: ID
  avatar: ID
}

enum ENUM_DIA_ESTADO {
  pedido
  confirmado
}

enum ENUM_DIA_TIPO {
  libre
  remoto
  festivo
}

type Equipo {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nombre: String
  dias(sort: String, limit: Int, start: Int, where: JSON): [Dia]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type EquipoAggregator {
  count: Int
}

type EquipoConnection {
  values: [Equipo]
  groupBy: EquipoGroupBy
  aggregate: EquipoAggregator
}

type EquipoConnection_id {
  key: ID
  connection: EquipoConnection
}

type EquipoConnectionCreatedAt {
  key: DateTime
  connection: EquipoConnection
}

type EquipoConnectionNombre {
  key: String
  connection: EquipoConnection
}

type EquipoConnectionUpdatedAt {
  key: DateTime
  connection: EquipoConnection
}

type EquipoGroupBy {
  _id: [EquipoConnection_id]
  createdAt: [EquipoConnectionCreatedAt]
  updatedAt: [EquipoConnectionUpdatedAt]
  nombre: [EquipoConnectionNombre]
}

input EquipoInput {
  nombre: String
  dias: [ID]
  users: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Dia | createDiaPayload | updateDiaPayload | deleteDiaPayload | DiaConnection | DiaAggregator | DiaGroupBy | DiaConnection_id | DiaConnectionCreatedAt | DiaConnectionUpdatedAt | DiaConnectionFecha | DiaConnectionUser | DiaConnectionEquipo | DiaConnectionEstado | DiaConnectionTipo | Documento | createDocumentoPayload | updateDocumentoPayload | deleteDocumentoPayload | DocumentoConnection | DocumentoAggregator | DocumentoGroupBy | DocumentoConnection_id | DocumentoConnectionCreatedAt | DocumentoConnectionUpdatedAt | DocumentoConnectionArchivo | DocumentoConnectionUser | Equipo | createEquipoPayload | updateEquipoPayload | deleteEquipoPayload | EquipoConnection | EquipoAggregator | EquipoGroupBy | EquipoConnection_id | EquipoConnectionCreatedAt | EquipoConnectionUpdatedAt | EquipoConnectionNombre | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionEquipo | UsersPermissionsUserConnectionManager | UsersPermissionsUserConnectionDocumento | UsersPermissionsUserConnectionAvatar

type Mutation {
  createDia(input: createDiaInput): createDiaPayload
  updateDia(input: updateDiaInput): updateDiaPayload
  deleteDia(input: deleteDiaInput): deleteDiaPayload
  createDocumento(input: createDocumentoInput): createDocumentoPayload
  updateDocumento(input: updateDocumentoInput): updateDocumentoPayload
  deleteDocumento(input: deleteDocumentoInput): deleteDocumentoPayload
  createEquipo(input: createEquipoInput): createEquipoPayload
  updateEquipo(input: updateEquipoInput): updateEquipoPayload
  deleteEquipo(input: deleteEquipoInput): deleteEquipoPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  dia(id: ID!): Dia
  dias(sort: String, limit: Int, start: Int, where: JSON): [Dia]
  diasConnection(sort: String, limit: Int, start: Int, where: JSON): DiaConnection
  documento(id: ID!): Documento
  documentos(sort: String, limit: Int, start: Int, where: JSON): [Documento]
  documentosConnection(sort: String, limit: Int, start: Int, where: JSON): DocumentoConnection
  equipo(id: ID!): Equipo
  equipos(sort: String, limit: Int, start: Int, where: JSON): [Equipo]
  equiposConnection(sort: String, limit: Int, start: Int, where: JSON): EquipoConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateDiaInput {
  where: InputID
  data: editDiaInput
}

type updateDiaPayload {
  dia: Dia
}

input updateDocumentoInput {
  where: InputID
  data: editDocumentoInput
}

type updateDocumentoPayload {
  documento: Documento
}

input updateEquipoInput {
  where: InputID
  data: editEquipoInput
}

type updateEquipoPayload {
  equipo: Equipo
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  dias: [ID]
  equipo: ID
  manager: Boolean
  documento: ID
  avatar: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  equipo: Equipo
  manager: Boolean
  documento: Documento
  avatar: UploadFile
  dias(sort: String, limit: Int, start: Int, where: JSON): [Dia]
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionAvatar {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionDocumento {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEquipo {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionManager {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  equipo: [UsersPermissionsUserConnectionEquipo]
  manager: [UsersPermissionsUserConnectionManager]
  documento: [UsersPermissionsUserConnectionDocumento]
  avatar: [UsersPermissionsUserConnectionAvatar]
}
